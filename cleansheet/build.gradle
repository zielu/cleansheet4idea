import java.nio.file.Paths
import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.4.21"
    id 'com.palantir.git-version' version '0.12.3'
    id 'ch.netzwerg.release' version '1.2.5'
}

repositories {
    mavenCentral()
}

apply plugin: 'org.jetbrains.intellij'
apply plugin: "java"

def javaVersion = JavaVersion.VERSION_11

java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

def fast = Boolean.valueOf(String.valueOf(findProperty('fast')))
def publish = Boolean.valueOf(String.valueOf(findProperty('publish')))

configurations {
    testAgent {
        transitive = false
    }
}

def ideaCacheDir = Paths.get(System.getProperty('user.home')).resolve('intellij-gradle-cache').toAbsolutePath().toString()
println("Idea cache dir: " + ideaCacheDir)

intellij {
    version = ideaVersion
    type = ideaType
    updateSinceUntilBuild = false
    downloadSources = true
    ideaDependencyCachePath = ideaCacheDir
}

apply plugin: 'idea'
idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
}

compileJava.options.encoding = encoding
compileTestJava.options.encoding = encoding

patchPluginXml {
    changeNotes "${file('change-notes.html').getText('UTF-8')}"
    pluginDescription "${file('description.html').getText('UTF-8')}"
            .replace("RELEASE_DATETIME", buildTime())
            .replace("RELEASE_TYPE", buildType());
}

jar {
    manifest {
        attributes(
            'Name': project.name,
            'Specification-Title': project.name,
            'Specification-Vendor': 'Lukasz Zielinski (zieluuuu@gmail.com)',
            'Specification-Version': project.version,
            'Implementation-Title': project.name,
            'Implementation-Vendor': 'Lukasz Zielinski (zieluuuu@gmail.com)',
            'Implementation-Version': versionDetails().gitHash,
            'Build-Date': buildTime()
        )
    }
}

release {
    tagPrefix = ''
    dependsOn buildPlugin
}

if (publish) {
    apply from: 'publish.gradle'
    publishPlugin {
        token = project.publishToken
        username = project.publishUsername
        password = project.publishPassword
        channels = publishChannels()
    }
}

def static buildTime() {
    def df = new SimpleDateFormat("yyyyMMdd.HHmmss")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

def isStableBuild() {
    def details = versionDetails()
    return details.branchName ==~ /(master|\d+-release)/
}

def buildType() {
    def details = versionDetails()
    return details.branchName != "master" ? "EAP" : "Stable"
}

def publishChannels() {
    return isStableBuild() ? ['default', 'eap'] : ['eap']
}
